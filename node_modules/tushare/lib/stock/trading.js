'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHistory = getHistory;
exports.getTick = getTick;
exports.getTodayAll = getTodayAll;
exports.getLiveData = getLiveData;
exports.getTodayTick = getTodayTick;
exports.getIndex = getIndex;
exports.getSinaDD = getSinaDD;

var _superagentCharset = require('superagent-charset');

var _superagentCharset2 = _interopRequireDefault(_superagentCharset);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _urls = require('./urls');

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * getHistory: 获取个股历史数据
 * 返回数据格式 - 日期 ，开盘价， 最高价， 收盘价， 最低价， 成交量， 价格变动 ，涨跌幅，5日均价，10日均价，20日均价，5日均量，10日均量，20日均量，换手率
 *
 * @param {Object} options = {} - options
 * @param {String} options.code - 股票代码, 例如： '600848'
 * @param {String} options.start - 开始日期 format：YYYY-MM-DD 为空时取到API所提供的最早日期数据
 * @param {String} options.end - 结束日期 format：YYYY-MM-DD 为空时取到最近一个交易日数据
 * @param {String} options.ktype - 数据类型，day=日k线 week=周 month=月 5=5分钟 15=15分钟 30=30分钟 60=60分钟，默认为day
 * @param cb
 * @return {undefined}
 */
function getHistory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var cb = arguments[1];

  var defaults = {
    code: null,
    start: null,
    end: null,
    ktype: 'day'
  };
  if (Object.prototype.toString.apply(options) === '[object Function]') {
    cb = options;
    options = {};
  }
  options = Object.assign(defaults, options);

  var symbol = (0, _util.codeToSymbol)(options.code);
  var url = (0, _urls.priceUrl)(options.ktype, symbol);
  console.info(url)
  _superagentCharset2.default.get(url).end(function (err, res) {
    if (err || !res.ok) {
      cb(err);
    } else if (res.text) {
      cb(null, JSON.parse(res.text));
    } else {
      cb(null, {});
    }
  });
}

/**
 * getTick - 获取历史分笔数据
 * 返回格式：成交时间 成交价  涨跌幅  价格变动  成交量(手)  成交额(元)  性质
 *
 * @param {Object} options
 * @param {string} options.code - 股票代码, 例如： '600848'
 * @param {string} options.date - 日期 格式：YYYY-MM-DD
 * @param cb
 * @return {undefined}
 */
function getTick(options, cb) {
  var defaults = {
    code: null,
    date: null
  };
  if (Object.prototype.toString.apply(options) === '[object Function]') {
    cb = options;
    options = {};
  }
  options = Object.assign(defaults, options);

  var symbol = (0, _util.codeToSymbol)(options.code);
  var url = (0, _urls.tickUrl)(options.date, symbol);
  console.info(url)
  _superagentCharset2.default.get(url).charset('gbk').buffer().end(function (err, res) {
    if (err || !res.ok) {
      cb(err);
    } else if (res.text) {
      (function () {
        var ret = [];
        res.text.split('\n').forEach(function (line, i) {
          if (i !== 0 && line !== '') {
            ret.push(line.split('\t'));
          }
        });
        cb(null, ret);
      })();
    } else {
      cb(null, []);
    }
  });
}

/**
 * getTodayAll - 一次性获取最近一个日交易日所有股票的交易数据
 * 返回数据格式：代码，名称，涨跌幅，现价，开盘价，最高价，最低价，最日收盘价，成交量，换手率
 *
 * @param options - (可选) 若为空，则返回A股市场今日所有数据
 * @param {Number} options.pageSize - 分页的大小，如：80， 默认10000，即返回所有数据
 * @param {Number} options.pageNo - 分页页码，默认1
 * @param cb
 * @return {undefined}
 */
function getTodayAll(options, cb) {
  var defaults = {
    pageSize: 10000,
    pageNo: 1
  };
  if (Object.prototype.toString.apply(options) === '[object Function]') {
    cb = options;
    options = {};
  }
  options = Object.assign(defaults, options);

  var url = (0, _urls.todayAllUrl)(options.pageSize, options.pageNo);
  console.info(url)
  _superagentCharset2.default.get(url).charset('gbk').buffer().end(function (err, res) {
    if (err || !res.ok) {
      cb(err);
    } else if (res.text) {
      var ret = eval(res.text);
      cb(null, ret);
    } else {
      cb(null, []);
    }
  });
}

/**
 * getLiveData - 获取实时交易数据
 * 返回数据：{Array}
 * 0：股票代码
 * 1：股票名字
 * 2：今日开盘价
 * 3：昨日收盘价
 * 4：当前价格
 * 5：今日最高价
 * 6：今日最低价
 * 7：竞买价，即“买一”报价
 * 8：竞卖价，即“卖一”报价
 * 9：成交量 maybe you need do volume/100
 * 10：成交金额（元 CNY）
 * 11：委买一（笔数 bid volume）
 * 12：委买一（价格 bid price）
 * 13：“买二”
 * 14：“买二”
 * 15：“买三”
 * 16：“买三”
 * 17：“买四”
 * 18：“买四”
 * 19：“买五”
 * 20：“买五”
 * 21：委卖一（笔数 ask volume）
 * 22：委卖一（价格 ask price）
 * ...
 * 31：日期；
 * 32：时间；
 *
 * @param {Object} options
 * @param {Array} options.codes - 股票代码数组，例如['600848', '600000', '600343']
 * @param cb
 * @return {undefined}
 */
function getLiveData(options, cb) {
  var defaults = {
    codes: ['600000']
  };
  if (Object.prototype.toString.apply(options) === '[object Function]') {
    cb = options;
    options = {};
  }
  options = Object.assign(defaults, options);

  var codes = options.codes.map(function (code) {
    return (0, _util.codeToSymbol)(code);
  });

  var url = (0, _urls.liveDataUrl)(codes);
  console.info(url)
  _superagentCharset2.default.get(url).charset('gbk').buffer().end(function (err, res) {
    if (err || !res.ok) {
      cb(err);
    } else if (res.text) {
      var ret = res.text.split('\n').filter(function (tmpStr) {
        return tmpStr !== '';
      }).map(function (codeStr) {
        var matches = codeStr.match(/(sz|sh)(\d{6}).*\"(.*)\"/i);
        var symbol = matches[1] + matches[2];
        var data = matches[3].split(',');
        data.unshift(symbol);
        return data;
      });
      cb(null, ret);
    } else {
      cb(null, []);
    }
  });
}

/**
 * getTodayTick - 获取当日分笔明细数据，用于在交易进行的时候获取
 * 返回数据：
 * {
 *  begin: 开始时间,
 *  end: 结束时间,
 *  zhubi_list: [
 *    {
 *      TRADE_TYPE: 交易类型, 1: 买盘，0：中性盘，-1：卖盘
 *      PRICE_PRE: 上一档价格
 *      PRICE: 当前价格
 *      VOLUME_INC: 成交量(股)
 *      TURNOVER_INC: 成交额
 *      TRADE_TYPE_STR: 交易类型：买盘、卖盘、中性盘
 *      DATE_STR: 时间
 *    }
 *  ]
 * }
 *
 * @param {Object} options
 * @param {String} options.code - 六位股票代码
 * @param {String} options.end - 结束时间。例如：15:00:00, 那么就会获取14:55:00 - 15:00:00之间的分笔数据，也就是end指定时间之前的五分钟
 * @param cb
 * @return {undefined}
 */
function getTodayTick(options, cb) {
  var defaults = {
    code: '600000',
    end: '15:00:00'
  };
  if (Object.prototype.toString.apply(options) === '[object Function]') {
    cb = options;
    options = {};
  }
  options = Object.assign(defaults, options);

  var url = (0, _urls.todayTickUrl)(options.code, options.end);
  console.info(url)
  _superagentCharset2.default.get(url).charset('gbk').end(function (err, res) {
    if (err || !res.ok) {
      cb(err);
    } else if (res.text) {
      cb(null, JSON.parse(res.text));
    } else {
      cb(null, []);
    }
  });
}

function getIndex(op, cb) {
  var url = (0, _urls.indexUrl)();
  console.info(url)
  _superagentCharset2.default.get(url).charset('gbk').buffer().end(function (err, res) {
    if (err || !res.ok) {
      cb(err);
    } else if (res.text) {
      var ret = res.text.split('\n').filter(function (tmpStr) {
        return tmpStr !== '';
      }).map(function (codeStr) {
        var matches = codeStr.match(/(sz|sh)(\d{6}).*\"(.*)\"/i);
        var symbol = matches[1] + matches[2];
        var data = matches[3].split(',');
        return {
          code: symbol,
          name: data[0],
          open: data[1],
          preclose: data[2],
          close: data[3],
          high: data[4],
          low: data[5],
          volume: data[8],
          amount: data[9]
        };
      });
      cb(null, ret);
    } else {
      cb(null, []);
    }
  });
}

/**
 * getSinaDD - 获取新浪大单数据
 * 返回数组：
 * [
 *  {
 *    symbol: 股票代码
 *    name: 股票名字
 *    time: 时间
 *    price: 成交价格
 *    volume: 成交量（手）
 *    preprice: 前一价格
 *    type: 类型，买盘、卖盘、中性盘
 *  }
 * ]
 *
 * @param {Object} options
 * @param {String} options.code - 六位股票代码
 * @param {String} options.volume - 设置多少手以上算大单，例如: 400，则返回400手以上交易量的大单
 * @param {String} options.date - 日期，格式YYYY-MM-DD， 默认当日日期
 * @param cb
 * @return {undefined}
 */
function getSinaDD(options, cb) {
  var defaults = {
    code: '600000',
    volume: 400,
    date: (0, _moment2.default)().format('YYYY-MM-DD')
  };
  if (Object.prototype.toString.apply(options) === '[object Function]') {
    cb = options;
    options = {};
  }
  options = Object.assign(defaults, options);
  var url = (0, _urls.sinaDDUrl)((0, _util.codeToSymbol)(options.code), options.volume * 100, options.date);
  console.info(url)
  _superagentCharset2.default.get(url).charset('gbk').buffer().end(function (err, res) {
    if (err || !res.ok) {
      cb(err);
    } else if (res.text) {
      var ret = res.text.split('\n').filter(function (tmpStr, idx) {
        return tmpStr !== '' && idx !== 0;
      }).map(function (ddStr) {
        var ddArr = ddStr.split(',');
        return {
          symbol: ddArr[0],
          name: ddArr[1],
          time: ddArr[2],
          price: ddArr[3],
          volume: ddArr[4] / 100,
          preprice: ddArr[5],
          type: ddArr[6]
        };
      });
      cb(null, ret);
    } else {
      cb(null, []);
    }
  });
}